// This file was generated by SquareLine Studio
// SquareLine Studio version: SquareLine Studio 1.5.0
// LVGL version: 9.1.0
// Project name: SquareLine_Project

#include "../ui.h"
#include <vector>






enum class led_pin_code_t {
    red_led = 0,
    green_led = 1,
    blue_led = 2,
    white_led = 3,
    yellow_led = 4,
    heater = 5,
    feeder = 6,
    aroma = 7,
    sanitizer = 8,
    pro_isolator = 9
};
struct pin_set
{
    uint8_t pc;    //pin code
    uint32_t tv;    //target_value
};
const uint8_t led_correspond_pin[] = {
    42, // 0 -> red led
    41, // 1 -> green led
    40, // 2 -> blue led
    0,  // 3 -> white led
    0,  // 4 -> yellow led
    0,  // 5
    0,  // 6
    0,  // 7
    0,  // 8
    0,  // 9
};

struct led_strategy_t
{
    enum class mode_t
    {
        period = 0,
        duration = 1 // after the duration, the strategy will self-turn-off.
    };
    mode_t m;
    bool en;

    char dm;
    uint32_t tb;
    uint32_t te;

    std::vector<pin_set> ps;
};
static std::vector<led_strategy_t> strat;
struct led_tmp_t {
    uint8_t pin_code;
    uint8_t value;
    bool activated = false;
    uint32_t duration;
};
std::vector<led_tmp_t> led_tmp_set;
struct led_filter {
    static constexpr size_t sum = sizeof(led_correspond_pin);
    inline static uint8_t value[sum] = {};
    inline static uint8_t target[sum] = {};
    led_filter() = delete;
};












static lv_obj_t* ui_strat[2];
static uint8_t scr_where = 0;
static lv_obj_t* title[2];
static lv_obj_t* titleIcon[2];
static lv_obj_t* strat_list[2];

static void rerender();
extern "C" static void ui_strat_temp_cb(lv_event_t* e);
extern "C" static void ui_strat_add_cb(lv_event_t* e);

extern "C" void ui_strat_screen_init(void)
{
    for (int ind = 0; ind < 2; ind++)
    {
        ui_strat[ind] = lv_obj_create(NULL);
        lv_obj_remove_flag(ui_strat[ind], LV_OBJ_FLAG_SCROLLABLE);    /// Flags
        lv_obj_set_style_bg_color(ui_strat[ind], lv_color_hex(0x000000), LV_PART_MAIN | LV_STATE_DEFAULT);

        title[ind] = lv_label_create(ui_strat[ind]);
        lv_obj_align(title[ind], LV_ALIGN_TOP_LEFT, 16, 16);
        lv_obj_set_style_text_color(title[ind], lv_color_hex(LANDE), LV_PART_MAIN);
        lv_obj_set_style_text_font(title[ind], &ui_font_Chinese16B, LV_PART_MAIN);

        strat_list[ind] = lv_list_create(ui_strat[ind]);
        lv_obj_set_size(strat_list[ind], lv_pct(100), lv_pct(85));
        lv_obj_set_style_pad_row(strat_list[ind], 5, 0);
        lv_obj_set_align(strat_list[ind], LV_ALIGN_BOTTOM_MID);
        lv_obj_set_flex_flow(strat_list[ind], LV_FLEX_FLOW_ROW_WRAP);
        lv_obj_set_flex_align(strat_list[ind], LV_FLEX_ALIGN_START, LV_FLEX_ALIGN_START, LV_FLEX_ALIGN_START);
        lv_obj_set_style_bg_color(strat_list[ind], lv_color_hex(0xFFFFFF), LV_PART_MAIN | LV_STATE_DEFAULT);
        lv_obj_set_style_bg_opa(strat_list[ind], 0, LV_PART_MAIN | LV_STATE_DEFAULT);
        lv_obj_set_style_border_color(strat_list[ind], lv_color_hex(0x000000), LV_PART_MAIN | LV_STATE_DEFAULT);
        lv_obj_set_style_border_opa(strat_list[ind], 0, LV_PART_MAIN | LV_STATE_DEFAULT);
        lv_obj_set_style_pad_left(strat_list[ind], 0, LV_PART_SCROLLBAR | LV_STATE_DEFAULT);
        lv_obj_set_style_pad_right(strat_list[ind], 0, LV_PART_SCROLLBAR | LV_STATE_DEFAULT);
        lv_obj_set_style_pad_top(strat_list[ind], 0, LV_PART_SCROLLBAR | LV_STATE_DEFAULT);
        lv_obj_set_style_pad_bottom(strat_list[ind], 0, LV_PART_SCROLLBAR | LV_STATE_DEFAULT);
        lv_obj_set_style_pad_row(strat_list[ind], 0, LV_PART_SCROLLBAR | LV_STATE_DEFAULT);
        lv_obj_set_style_pad_column(strat_list[ind], 0, LV_PART_SCROLLBAR | LV_STATE_DEFAULT);

        titleIcon[ind] = lv_image_create(ui_strat[ind]);
        lv_obj_align(titleIcon[ind], LV_ALIGN_TOP_RIGHT, -16, 5);
        lv_obj_add_flag(titleIcon[ind], LV_OBJ_FLAG_CLICKABLE);
        lv_obj_remove_flag(titleIcon[ind], LV_OBJ_FLAG_SCROLLABLE);
        lv_obj_set_style_image_recolor(titleIcon[ind], lv_color_hex(LANDE), LV_PART_MAIN | LV_STATE_DEFAULT);
        lv_obj_set_style_image_recolor_opa(titleIcon[ind], 255, LV_PART_MAIN | LV_STATE_DEFAULT);

        lv_obj_t* addBtn = lv_button_create(ui_strat[ind]);
        lv_obj_set_size(addBtn, 50, 50);
        lv_obj_set_style_bg_opa(addBtn, LV_OPA_TRANSP, LV_PART_MAIN);
        lv_obj_align(addBtn, LV_ALIGN_BOTTOM_RIGHT, -16, -16);
        lv_obj_set_style_shadow_width(addBtn, 0, LV_PART_MAIN);
        lv_obj_t* addIcon = lv_label_create(addBtn);
        lv_label_set_text(addIcon, "+");
        lv_obj_set_style_text_color(addIcon, lv_color_hex(0xffffff), LV_PART_MAIN);
        lv_obj_set_style_text_font(addIcon, &ui_font_Chinese32B, LV_PART_MAIN);

        lv_obj_add_event_cb(addBtn, ui_strat_add_cb, LV_EVENT_ALL, NULL);
        lv_obj_add_event_cb(titleIcon[ind], ui_strat_temp_cb, LV_EVENT_ALL, NULL);
        lv_obj_add_event_cb(ui_strat[ind], ui_event_strat, LV_EVENT_ALL, NULL);
        lv_obj_add_event_cb(ui_strat[ind], ui_event_main, LV_EVENT_ALL, NULL);
    }
}

extern "C" static void ui_strat_temp_cb(lv_event_t* e)
{

}

extern "C" static void ui_strat_add_cb(lv_event_t* e)
{
    _ui_screen_change(&ui_stratDetail, LV_SCR_LOAD_ANIM_FADE_IN, 500, 0, &ui_stratDetail_screen_init);
}

extern "C" void ui_strat_screen_entry(ui_strat_mode_t m, lv_screen_load_anim_t anim)
{
    ui_strat_mode = m;
    if (scr_where == 0)
    {
        scr_where = 1;
        _ui_screen_change(&ui_strat[1], anim, 500, 0, &ui_strat_screen_init);
    }
    else
    {
        scr_where = 0;
        _ui_screen_change(&ui_strat[0], anim, 500, 0, &ui_strat_screen_init);
    }

    //re-render strategy screen
    switch (m)
    {
    case ui_strat_mode_light:
        lv_label_set_text(title[scr_where], "灯光");
        lv_image_set_src(titleIcon[scr_where], &ui_img_lightboard_png);
        break;
    case ui_strat_mode_pump:
        lv_label_set_text(title[scr_where], "水泵");
        lv_image_set_src(titleIcon[scr_where], &ui_img_pump_png);
        break;
    case ui_strat_mode_heat:
        lv_label_set_text(title[scr_where], "加热器");
        lv_image_set_src(titleIcon[scr_where], &ui_img_heater_png);
        break;
    case ui_strat_mode_feed:
        lv_label_set_text(title[scr_where], "喂食器");
        lv_image_set_src(titleIcon[scr_where], &ui_img_feed_png);
        break;
    case ui_strat_mode_aroma:
        lv_label_set_text(title[scr_where], "香薰");
        lv_image_set_src(titleIcon[scr_where], &ui_img_aroma_png);
        break;
    case ui_strat_mode_sanit:
        lv_label_set_text(title[scr_where], "杀菌灯");
        lv_image_set_src(titleIcon[scr_where], &ui_img_light_png);
        break;
    case ui_strat_mode_isola:
        lv_label_set_text(title[scr_where], "蛋分器");
        lv_image_set_src(titleIcon[scr_where], &ui_img_heater_png);
        break;
    }



    lv_obj_clean(strat_list[scr_where]);

    //for (pos = module->next; pos != module; pos = pos->next) {
    //    lv_obj_t* ui_listBtn = lv_button_create(ui_controlList);
    //    lv_obj_set_align(ui_listBtn, LV_ALIGN_CENTER);
    //    lv_obj_set_size(ui_listBtn, lv_pct(100), lv_pct(20));
    //    lv_obj_add_flag(ui_listBtn, LV_OBJ_FLAG_SCROLL_ON_FOCUS);   /// Flags
    //    lv_obj_remove_flag(ui_listBtn, LV_OBJ_FLAG_SCROLLABLE);    /// Flags
    //    lv_obj_set_style_bg_color(ui_listBtn, lv_color_hex(0x909090), LV_PART_MAIN | LV_STATE_DEFAULT);
    //    lv_obj_set_style_bg_opa(ui_listBtn, 127, LV_PART_MAIN | LV_STATE_DEFAULT);
    //    lv_obj_set_style_shadow_opa(ui_listBtn, 0, LV_PART_MAIN | LV_STATE_DEFAULT);

    //    lv_obj_t* ui_listBtnLab = lv_label_create(ui_listBtn);
    //    lv_obj_align(ui_listBtnLab, LV_ALIGN_LEFT_MID, 32, 0);
    //    lv_label_set_text_fmt(ui_listBtnLab, "%s", pos->mod->name);
    //    lv_obj_set_style_text_font(ui_listBtnLab, &ui_font_Chinese16B, LV_PART_MAIN | LV_STATE_DEFAULT);

    //    lv_obj_t* ui_listImg = lv_image_create(ui_listBtn);
    //    lv_image_set_src(ui_listImg, pos->mod->img);
    //    lv_obj_set_align(ui_listImg, LV_ALIGN_LEFT_MID);
    //    lv_obj_add_flag(ui_listImg, LV_OBJ_FLAG_CLICKABLE);   /// Flags
    //    lv_obj_remove_flag(ui_listImg, LV_OBJ_FLAG_SCROLLABLE);    /// Flags
    //    lv_obj_set_style_image_recolor(ui_listImg, lv_color_hex(LANDE), LV_PART_MAIN | LV_STATE_DEFAULT);
    //    lv_obj_set_style_image_recolor_opa(ui_listImg, 255, LV_PART_MAIN | LV_STATE_DEFAULT);
    //    lv_obj_add_event_cb(ui_listBtn, pos->mod->event, LV_EVENT_ALL, NULL);
    //}
}

static void rerender()
{
    ui_strat_screen_entry(ui_strat_mode, LV_SCR_LOAD_ANIM_NONE);
}
