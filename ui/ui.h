// This file was generated by SquareLine Studio
// SquareLine Studio version: SquareLine Studio 1.5.0
// LVGL version: 9.1.0
// Project name: SquareLine_Project

#ifndef _SQUARELINE_PROJECT_UI_H
#define _SQUARELINE_PROJECT_UI_H

#ifdef __cplusplus
extern "C" {
#endif

#include <math.h>
#include "lvgl.h"
#include <time.h>
#include "ui_helpers.h"
#include "ui_events.h"
#include "ui_theme_manager.h"
#include "ui_themes.h"

/*********************
 *      DEFINES
 *********************/
#define TEMP    25
#define WL      "正常"
#define PUMP    7
#define LANDE 0x0A9AF7

// SCREEN: ui_standby
void ui_standby_screen_init(void);
void ui_event_main(lv_event_t* e);
extern lv_obj_t* ui_standby;
extern lv_obj_t* ui_standby_dateLab;
extern lv_obj_t* ui_standby_timeLab;
extern lv_obj_t* ui_standby_welcomeLab;

//SCEEN:ui_status
void ui_status_screen_init(void);
void ui_event_status_return(lv_event_t* e);
void ui_event_status(lv_event_t* e);
extern lv_obj_t* ui_status;
extern lv_obj_t* cur_act;
extern lv_obj_t* ui_status_wifiBtn;
extern lv_obj_t* ui_status_blueToothBtn;
extern lv_obj_t* ui_statusSlider;


// SCREEN: ui_main
void ui_main_screen_init(void);
void ui_event_control(lv_event_t* e);
extern lv_obj_t* hour_hand;
extern lv_obj_t* minute_hand;
extern lv_obj_t* second_hand;
extern lv_obj_t* ui_main;
extern lv_obj_t* ui_dateLab;
extern lv_obj_t* ui_timeLab;
extern lv_obj_t* ui_tempBar;
extern lv_obj_t* ui_waterLevelBar;
extern lv_obj_t* ui_mainInfo;
extern lv_obj_t* ui_mainInfoLab;


// CUSTOM VARIABLES

//SCREEN:ui_QR
void ui_QR_screen_init(void);
extern lv_obj_t* ui_QR;

// SCREEN: ui_control
void ui_control_screen_init(void);
void ui_event_tempBtn(lv_event_t* e);
void ui_event_waterLevelBtn(lv_event_t* e);
void ui_event_lighterBtn(lv_event_t* e);
void ui_event_heaterBtn(lv_event_t* e);
void ui_event_waterPumpBtn(lv_event_t* e);
void ui_event_moreBtn(lv_event_t* e);
void ui_event_AromatherapyBtn(lv_event_t* e);
extern lv_obj_t* ui_control;
extern lv_obj_t* ui_controlList;

// SCREEN: ui_more
void ui_more_screen_init(void);
void ui_event_more(lv_event_t* e);
extern lv_obj_t* ui_more;
extern lv_obj_t* ui_moreList;
extern uint8_t more_flag;

// SCREEN: ui_temp
void ui_temp_screen_init(void);
void ui_event_temp(lv_event_t* e);
extern lv_obj_t* ui_temp;
extern lv_obj_t* ui_tempLab;
extern lv_obj_t* ui_temp_ave_Lab;
extern lv_obj_t* ui_tempChart;
extern lv_obj_t* ui_tempChart_Yaxis;
extern lv_obj_t* ui_tempSeries;

// SCREEN: ui_waterLevel
void ui_waterLevel_screen_init(void);

void ui_event_waterLevel(lv_event_t* e);
void ui_event_waterPump(lv_event_t* e);
extern lv_obj_t* ui_waterLevel;
extern lv_obj_t* ui_waterLevelLab;

// SCREEN: ui_light
extern int lightMode;
extern const char * lightModeArr[6];
void ui_light_screen_init(void);
void ui_event_light( lv_event_t * e);
void ui_event_next(lv_event_t* e);
extern lv_obj_t *ui_light;
void ui_event_lightPer( lv_event_t * e);
extern lv_obj_t *ui_lightPer;
extern lv_obj_t* ui_lightinPer;
extern lv_obj_t *ui_setLightPerLab;
extern lv_obj_t *ui_curLightPerLab;
void ui_event_addlightPer( lv_event_t * e);
extern lv_obj_t *ui_addlightPer;
extern lv_obj_t *ui_addlightPerLab;
void ui_event_diflightPer( lv_event_t * e);
extern lv_obj_t *ui_diflightPer;
extern lv_obj_t *ui_diflightPerLab;
extern lv_obj_t *ui_lightStatus;
extern lv_obj_t* ui_lightStatusLab;
void ui_event_lightStatus(lv_event_t* e);
extern lv_obj_t *ui_lightStatusBtn;
extern lv_obj_t *ui_lightStatusImg;
extern lv_obj_t *ui_lightMode;
extern lv_obj_t *ui_lightModeLab;
void ui_event_atmosphereBtn( lv_event_t * e);
extern lv_obj_t *ui_atmosphereBtn;
extern lv_obj_t *ui_atmosphereBtnLab;
void ui_event_MovieBtn( lv_event_t * e);
extern lv_obj_t *ui_MovieBtn;
extern lv_obj_t *ui_MovieBtnLab;
void ui_event_romanBtn( lv_event_t * e);
extern lv_obj_t *ui_romanBtn;
extern lv_obj_t *ui_romanBtnLab;
void ui_event_starryBtn( lv_event_t * e);
extern lv_obj_t *ui_starryBtn;
extern lv_obj_t *ui_starryBtnLab;
void ui_event_dailyBtn( lv_event_t * e);
extern lv_obj_t *ui_dailyBtn;
extern lv_obj_t *ui_dailyBtnLab;
// CUSTOM VARIABLES

// SCREEN: ui_pump
void ui_pump_screen_init(void);
extern lv_obj_t *ui_pump;
void ui_event_pumpPer( lv_event_t * e);
extern lv_obj_t *ui_pumpPer;
extern lv_obj_t* ui_pumpinPer;
extern lv_obj_t *ui_curpumpPerLab;
extern lv_obj_t *ui_setpumpPerLab;
void ui_event_addpumpPer( lv_event_t * e);
extern lv_obj_t *ui_addpumpPer;
extern lv_obj_t *ui_addpumpPerLab;
void ui_event_difpumpPer( lv_event_t * e);
extern lv_obj_t *ui_difpumpPer;
extern lv_obj_t *ui_difpumpPerLab;
void ui_event_pumpStatus(lv_event_t* e);
extern lv_obj_t *ui_pumpStatus;
extern lv_obj_t *ui_pumpStatusLab;
extern lv_obj_t *ui_pumpStatusBtn;
extern lv_obj_t *ui_pumpStatusImg;
// CUSTOM VARIABLES

// SCREEN: ui_heater
void ui_heater_screen_init(void);
void ui_event_heater( lv_event_t * e);
extern lv_obj_t *ui_heater;
void ui_event_heaterPer( lv_event_t * e);
extern lv_obj_t *ui_heaterPer;
extern lv_obj_t* ui_heaterinPer;
extern lv_obj_t *ui_curheaterPerLab;
extern lv_obj_t *ui_setheaterPerLab;
void ui_event_addheaterPer( lv_event_t * e);
extern lv_obj_t *ui_addheaterPer;
extern lv_obj_t *ui_addheaterPerLab;
void ui_event_difheaterPer( lv_event_t * e);
extern lv_obj_t *ui_difheaterPer;
extern lv_obj_t *ui_difheaterPerLab;
extern lv_obj_t *ui_heaterStatus;
extern lv_obj_t *ui_heaterStatusLab;
extern lv_obj_t *ui_heaterStatusBtn;
extern lv_obj_t *ui_heaterStatusImg;
// CUSTOM VARIABLES

// SCREEN: ui_aroma
void ui_aroma_screen_init(void);
void ui_event_aroma( lv_event_t * e);
extern lv_obj_t *ui_aroma;
void ui_event_aromaPer( lv_event_t * e);
extern lv_obj_t *ui_aromaPer;
extern lv_obj_t* ui_aromainPer;
extern lv_obj_t *ui_curaromaPerLab;
extern lv_obj_t *ui_setaromaPerLab;
void ui_event_addaromaPer( lv_event_t * e);
extern lv_obj_t *ui_addaromaPer;
extern lv_obj_t *ui_addaromaPerLab;
void ui_event_difaromaPer( lv_event_t * e);
extern lv_obj_t *ui_difaromaPer;
extern lv_obj_t *ui_difaromaPerLab;
extern lv_obj_t *ui_aromaStatus;
extern lv_obj_t *ui_aromaStatusLab;
extern lv_obj_t *ui_aromaStatusBtn;
extern lv_obj_t *ui_aromaStatusImg;
// CUSTOM VARIABLES

// SCREEN: ui_feed
void ui_feed_screen_init(void);
void ui_event_feed( lv_event_t * e);
extern lv_obj_t *ui_feed;
void ui_event_feedPer( lv_event_t * e);
extern lv_obj_t *ui_feedPer;
extern lv_obj_t* ui_feedinPer;
extern lv_obj_t *ui_curfeedPerLab;
extern lv_obj_t *ui_setfeedPerLab;
void ui_event_addfeedPer( lv_event_t * e);
extern lv_obj_t *ui_addfeedPer;
extern lv_obj_t *ui_addfeedPerLab;
void ui_event_diffeedPer( lv_event_t * e);
extern lv_obj_t *ui_diffeedPer;
extern lv_obj_t *ui_diffeedPerLab;
extern lv_obj_t *ui_feedStatus;
extern lv_obj_t *ui_feedStatusLab;
extern lv_obj_t *ui_feedStatusBtn;
extern lv_obj_t *ui_feedStatusImg;
extern lv_obj_t *ui_feedAmount;
extern lv_obj_t *ui_feedAmountLab;
extern lv_obj_t *ui_feedAmountSlider;
extern lv_obj_t *ui_feedAmountSliderLab;
extern lv_obj_t *ui_feedFreq;
extern lv_obj_t *ui_feedFreqLab;
extern lv_obj_t *ui_feedFreqBtn;
extern lv_obj_t *ui_oneADayBtn;
extern lv_obj_t *ui_oneADayBtnLab;
extern lv_obj_t *ui_twoADayBtn;
extern lv_obj_t *ui_twoADayBtnLab;
extern lv_obj_t *ui_threeADayBtn;
extern lv_obj_t *ui_threeADayBtnLab;
extern lv_obj_t *ui_fiveAWeekBtn;
extern lv_obj_t *ui_fiveAWeekBtnLab;
extern lv_obj_t *ui_sevenAWeekBtn;
extern lv_obj_t *ui_sevenAWeekBtnLab;
// CUSTOM VARIABLES

// EVENTS

extern lv_obj_t *ui____initial_actions0;

// IMAGES AND IMAGE SETS
LV_IMG_DECLARE( ui_img_main_png);
LV_IMG_DECLARE( ui_img_setup_png);   // assets/setup.png
LV_IMG_DECLARE( ui_img_light_png);   // assets/light.png
LV_IMG_DECLARE( ui_img_heater_png);   // assets/heater.png
LV_IMG_DECLARE( ui_img_pump_png);   // assets/pump.png
LV_IMG_DECLARE( ui_img_feed_png);   // assets/feed.png
LV_IMG_DECLARE( ui_img_level_png);   // assets/level.png
LV_IMG_DECLARE( ui_img_aroma_png);   // assets/aroma.png
LV_IMG_DECLARE( ui_img_cloud_png);   // assets/cloud.png
LV_IMG_DECLARE( ui_img_off_png);   // assets/off.png
LV_IMG_DECLARE(ui_img_temp_png);   // assets/temp.png
LV_IMG_DECLARE(ui_img_bright_png);   // assets/bright.png
LV_IMG_DECLARE(ui_img_more_png);   // assets/more.png



// FONTS
//LV_FONT_DECLARE( ui_font_Chinese10);
//LV_FONT_DECLARE( ui_font_Chinese12);
//LV_FONT_DECLARE( ui_font_Chinese14);
//LV_FONT_DECLARE( ui_font_Chinese16);
LV_FONT_DECLARE( ui_font_Chinese16B);
LV_FONT_DECLARE( ui_font_Chinese32B);
//LV_FONT_DECLARE(ui_font_Chinese32);
//LV_FONT_DECLARE( ui_font_Chinese8);
//LV_FONT_DECLARE(ui_font_Chinese44);
//LV_FONT_DECLARE(ui_font_Chinese64);
LV_FONT_DECLARE(ui_font_Chinese96);
// UI INIT
void ui_init(void);
void set_background(lv_obj_t* scr);

#ifdef __cplusplus
} /*extern "C"*/
#endif

#endif
